Violations of Best Practices in the original TicTacToe Code, inluding issues and fixes implemented -

Violation 1 - Data Hiding/Open-Closed principle

	Issue - The Driver class holds all the methods and all of the logic for the game flow. The member variables in the class are public, thus exposing it to the user for modification. There is no separation of logic from data, which is an example of bad design. For example, the GUI cannot be changed without making changes to the logic of the game. 

	Fix - The code has been separated into Model, View and Controller classes with each class having its own private member variables that cannot be accessed or modified by the outside world. 

Violation 2 - Modularity

	Issue - The given code for tic-tac-toe implements initializations and game logic in a prose format within a single file. Maintenance of such code is extremely difficult and tricky because it is not properly organized into hierarchies and logical sections. Also, there is reuse of code in places which is unnecessary. For example, the logic to check for the condition for winning the game uses redundant 'if' conditions based on the origin button.

	Fix - The code has been segregated into hierarchical classes and logically separated methods to avoid redundancy. The logic to check winning condition checks the game grid on the whole irrespective of origin.

Violation 3 - Extensibility

	Issue - Since the code is not logically organized and there is no separation in the logic of the game from the view or controls, it cannot be extended in the future to support, say, different input methods (such as from the terminal) or changing the visualization without affecting the model of the game.

	Fix - The MVC approach used separates the view, controller and models and facilitates modification of each component exclusively without having to make changes to the others. The Adapter class used will allow other input methods like reading moves from the terminal in the future, if desired.

Violation 4 - Testability

	Issue - When the entire logic and game flow is part of a single class and the class is lengthy, bugs in the program cannot be easily identified. It is difficult to understand which part of the code might have triggered the failure. 

	Fix - The separation of logic, view and controls of the game allows unit tests to be written for each component separately so that testing becomes simpler, thereby allowing quick identification of the faulty component.